# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserModel {
  id: ID!
  personsId: String!
  username: String!
  level: String!
  verified: Boolean!
  acceptTermsAndConditions: Boolean!
  removed: DateTime
  created_at: DateTime
  updated_at: DateTime
  person: PersonModel!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CustomerModel {
  id: ID!
  personsId: String!
  username: String!
  password: String!
  level: String!
  verified: Boolean!
  acceptTermsAndConditions: Boolean!
  removed: DateTime
  created_at: DateTime
  updated_at: DateTime
}

type OrganizationModel {
  id: ID!
  licensesId: String!
  logosId: String
  addressesId: String!
  contactsId: String!
  calendarysId: String
  name: String!
  slug: String!
  birth: DateTime
  instruction: Instruction!
  about: String
  is_active: Boolean!
  removed: DateTime
  created_at: DateTime
  updated_at: DateTime
  contacts: ContactModel!
}

"""Type of teaching at the institution"""
enum Instruction {
  PRIMARY
  SECONDARY
  TECHNICAL
  PUNISHABLE
  TECHNICAL_END_PUNISHABLE
}

type ContactModel {
  id: ID!
  primaryPhone: String!
  secundaryPhone: String
  primaryEmail: String!
  secundaryEmail: String
  created_at: DateTime
  updated_at: DateTime
}

type PersonModel {
  id: ID!
  addressesId: String
  avatarsId: String
  firstName: String!
  lastName: String!
  bi: String
  removed: DateTime
  phone: String
  email: String
  created_at: DateTime
}

type CourseModel {
  id: ID!
  name: String!
  description: String
  created_at: DateTime
  updated_at: DateTime
}

type RoomModel {
  id: ID!
  coursesId: String!
  number: Float!
  group: String!
  level: Float!
  period: String!
  studentsLimit: Float!
  course: CourseModel!
}

type StudentModel {
  id: ID!
  personsId: String!
  roomsId: String!
  customersId: String
  created_at: DateTime
  updated_at: DateTime
  person: PersonModel!
  room: RoomModel!
  account: CustomerModel!
}

type IdentityModel {
  number: String!
  name: String!
  nif: String!
  date_of_birth: String!
  gender: String!
  nationality: String!
  father_full_name: String!
  mother_full_name: String!
  marital_status: String!
  issuance_date: String!
  issuance_location: String!
}

type PackageModel {
  id: ID!
  name: String!
  price: Float!
  students: Float!
  admins: Float!
  users: Float!
  services: Float!
  removed: DateTime!
  notification_email: Boolean!
  notification_sms: Boolean!
  manual_payment: Boolean!
  realtime_payment: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
}

type LicenseModel {
  id: ID!
  packagesId: String!
  code: String!
  startDate: DateTime!
  endDate: DateTime!
  created_at: DateTime
  updated_at: DateTime
  package: PackageModel!
}

type ServiceModel {
  id: ID!
  name: String!
  description: String!
  price: Float!
  organizationsId: String!
  created_at: DateTime
  updated_at: DateTime
}

type ServiceMonthlyModel {
  id: ID!
  service: String!
  link: String!
  price: Float!
  organizationsId: String!
  created_at: DateTime
  updated_at: DateTime
}

type PaymentServiceMonthlyModel {
  id: ID!
  servicesMonthlysId: String!
  studentsId: String!
  iban: String!
  account_number: String!
  reference: String!
  status: Status!
  value: Float!
  created_at: DateTime
  updated_at: DateTime
  student: StudentModel!
  service: ServiceMonthlyModel!
}

"""Status payments"""
enum Status {
  CANCELED
  PENDING
  APPROVED
}

type Query {
  identity(bi: String!): IdentityModel!
  packages: [PackageModel!]!
  package(id: String!): PackageModel!
  licenses: [LicenseModel!]!
  license(id: String!): LicenseModel!
  users: [UserModel!]!
  meCustomer: CustomerModel!
  customer(id: String!): CustomerModel!
  customers: [CustomerModel!]!
  organizations: [OrganizationModel!]!
  students: [StudentModel!]!
  student(id: String!): StudentModel!
  rooms: [RoomModel!]!
  room(id: String!): RoomModel!
  courses: [CourseModel!]!
  course(id: String!): CourseModel!
  services: [ServiceModel!]!
  service(id: String!): ServiceModel!
  serviceMonthlys: [ServiceMonthlyModel!]!
  serviceMonthly(id: String!): ServiceMonthlyModel!
  paymentsServicesMonthlys: [PaymentServiceMonthlyModel!]!
  paymentServiceMonthly(id: String!): PaymentServiceMonthlyModel!
}

type Mutation {
  addPackage(data: CreatePackageInput!): PackageModel!
  editPackage(data: UpdatePackageInput!): PackageModel!
  deletePackage(id: String!): PackageModel!
  addLicense(data: CreateLicenseInput!): LicenseModel!
  editLicense(data: UpdateLicenseInput!): LicenseModel!
  deleteLicense(id: String!): LicenseModel!
  authenticationUser(data: AuthUserInput!): String!
  addUser(data: CreateUserInput!): UserModel!
  deleteUser(id: String!): UserModel!
  authenticationCustomer(data: AuthCustomerInput!): String!
  addCustomer(data: CreateCustomerInput!): CustomerModel!
  editCustomer(data: UpdateCustomerInput!): CustomerModel!
  deleteCustomer(id: String!): CustomerModel!
  recoverCustomer(id: String!): CustomerModel!
  addOrganization(data: CreateOrganizationInput!): OrganizationModel!
  editOrganization(data: UpdateOrganizationInput!): OrganizationModel!
  enableOrganization(id: String!): OrganizationModel!
  disableOrganization(id: String!): OrganizationModel!
  deleteOrganization(id: String!): OrganizationModel!
  addStudent(data: CreateStudentInput!): StudentModel!
  addRoom(data: CreateRoomInput!): RoomModel!
  editRoom(data: UpdateRoomInput!): RoomModel!
  deleteRoom(id: String!): RoomModel!
  addCourse(data: CreateCourseInput!): CourseModel!
  editCourse(data: UpdateCourseInput!): CourseModel!
  deleteCourse(id: String!): CourseModel!
  addService(data: CreateServiceInput!): ServiceModel!
  editService(data: UpdateServiceInput!): ServiceModel!
  deleteService(id: String!): ServiceModel!
  addServiceMonthly(data: CreateServiceMonthlyInput!): ServiceMonthlyModel!
  editServiceMonthly(data: UpdateServiceMonthlyInput!): ServiceMonthlyModel!
  deleteServiceMonthly(id: String!): ServiceMonthlyModel!
  addPaymentServiceMonthly(data: CreatePaymentServiceMonthlyInput!): PaymentServiceMonthlyModel!
  editPaymentServiceMonthly(data: UpdatePaymentServiceMonthlyInput!): PaymentServiceMonthlyModel!
  deletePaymentServiceMonthly(id: String!): PaymentServiceMonthlyModel!
  approvedPaymentServiceMonthly(id: String!): PaymentServiceMonthlyModel!
  canceledPaymentServiceMonthly(id: String!): PaymentServiceMonthlyModel!
  pendingPaymentServiceMonthly(id: String!): PaymentServiceMonthlyModel!
}

input CreatePackageInput {
  name: String!
  price: Float!
  students: Float!
  admins: Float!
  users: Float!
  services: Float!
  notification_email: Boolean! = true
  notification_sms: Boolean! = false
  manual_payment: Boolean! = true
  realtime_payment: Boolean! = false
  security: Boolean! = true
}

input UpdatePackageInput {
  id: ID!
  name: String!
  price: Float!
  students: Float!
  admins: Float!
  users: Float!
  services: Float!
  removed: DateTime!
  notification_email: Boolean!
  notification_sms: Boolean!
  manual_payment: Boolean!
  realtime_payment: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
}

input CreateLicenseInput {
  packagesId: String!
  startDate: DateTime!
  endDate: DateTime!
}

input UpdateLicenseInput {
  id: ID!
  packagesId: String
  startDate: DateTime
  endDate: DateTime
}

input AuthUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  bi: String
  phone: String
  email: String!
  level: String = "MASTER"
}

input AuthCustomerInput {
  email: String!
  password: String!
}

input CreateCustomerInput {
  firstName: String!
  lastName: String!
  bi: String
  phone: String
  email: String!
  password: String!
  level: String = "EMPLOYEE"
}

input UpdateCustomerInput {
  id: ID!
  username: String
  firstName: String
  lastName: String
  bi: String
  phone: String
  email: String
  level: String = "EMPLOYEE"
}

input CreateOrganizationInput {
  licensesId: String!
  name: String!
  slug: String!
  birth: DateTime
  instruction: Instruction!
  about: String
  primaryPhone: String!
  secundaryPhone: String
  primaryEmail: String
  secundaryEmail: String
  location: String!
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
}

input UpdateOrganizationInput {
  id: ID!
  licensesId: String
  name: String
  slug: String
  birth: DateTime
  instruction: Instruction!
  about: String
  primaryPhone: String
  secundaryPhone: String
  primaryEmail: String
  secundaryEmail: String
  location: String
  firstName: String
  lastName: String
  phone: String
  email: String
}

input CreateStudentInput {
  roomsId: String!
  firstName: String!
  lastName: String!
  bi: String!
  phone: String
  email: String
}

input CreateRoomInput {
  coursesId: String!
  number: Float!
  group: String!
  level: Float!
  period: String!
  studentsLimit: Float
}

input UpdateRoomInput {
  id: ID!
  coursesId: String!
  number: Float!
  group: String!
  level: Float!
  period: String!
  studentsLimit: Float
}

input CreateCourseInput {
  name: String
  description: String
}

input UpdateCourseInput {
  id: ID!
  name: String
  description: String
}

input CreateServiceInput {
  name: String!
  description: String!
  price: Float!
}

input UpdateServiceInput {
  id: ID!
  name: String
  description: String
  price: Float
}

input CreateServiceMonthlyInput {
  service: String!
  price: Float!
}

input UpdateServiceMonthlyInput {
  id: ID!
  service: String
  price: Float
}

input CreatePaymentServiceMonthlyInput {
  servicesMonthlysId: String!
  studentsId: String!
  iban: String!
  account_number: String!
  reference: String!
  value: Float!
}

input UpdatePaymentServiceMonthlyInput {
  id: ID!
  servicesMonthlysId: String
  studentsId: String
  iban: String
  account_number: String
  reference: String
  value: Float
}